安装完成后，在开始菜单里找到“Git”->“Git Bash”

安装完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

通过git init命令把这个目录变成Git可以管理的仓库。一个.git的目录，这个目录是Git来跟踪管理版本库的。这个目录默认是隐藏的，用ls -ah命令就可以看见。


编写一个readme.txt文件，一定要放到learngit目录下（子目录也行）

用命令git add告诉Git，把文件添加到仓库：把文件修改添加到暂存区

用命令git commit告诉Git，把文件提交到仓库：-m后面输入的是本次提交的说明，可以输入任意内容,把暂存区的所有内容提交到当前分支。并清空暂存区。

运行git status命令可以让我们时刻掌握仓库当前的状态

git diff查看所做的修改

git log命令查看历史记录

Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

当前版本回退到上一个版本，就可以使用git reset命令：git reset --hard HEAD^

只要上面的命令行窗口还没有被关掉，commit id就可以指定回到未来的某个版本git reset --hard commitId

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。


第1步：创建SSH Key
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"

可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

可以把一个已有的本地仓库与之关联，根据GitHub的提示，在本地的learngit仓库下运行命令：git remote add origin git@github.com:413853428/learngit.git

git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。